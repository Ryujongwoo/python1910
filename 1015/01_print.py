# '#'으로 시작하는 문장은 번역기가 변역하지 않는다. => 주석, 설명
# 주석은 프로그램을 실행하는데 아무런 영향도 미치지 않는다.

# print() 함수는 인수로 지정된 데이터를 출력하고 줄을 바꾼다.
print("Hello Python")
print('안녕 파이썬')
print('==================================================')

# print() 함수로 2개 이상의 데이터를 출력하려면 데이터와 데이터를 ','나 '+'로 구분해서 출력한다.
print('Hello', 'Python') # ','로 구분하면 데이터와 데이터 사이에 공백 한 칸이 출력된다.
print('Hello' + 'Python') # '+'로 구분하면 데이터와 데이터가 연결되서 출력된다.
print('==================================================')

# '*' 연산자를 사용하면 특정 문자열을 지정한 횟수 만큼 반복해서 출력한다.
print('*' * 50)
print('=' * 50)

# print() 함수의 end 옵션을 이용하면 print() 함수가 실행된 후 출력할 내용을 지정할 수 있다.
# \n => new line, 줄을 바꾼다. => end 옵션 생략시 기본값
# end = '\n' => print() 함수를 실행한 후 '\n'을 출력한다. => 출력후 줄을 바꾼다.
print('*', end = '\n')
print('*', end = '') # print() 함수 실행후 줄을 바꾸지 않는다.
print('*')
print('=' * 50)

# 출력 서식을 지정해 출력하기
# %d(정수), %f(실수), %s(문자열)를 사용해 출력 서식을 지정할 수 있다.
# 출력 서식을 제외한 나머지 문자는 입력한 그대로 출력된다.
# 출력 서식의 형식 => %[-][0][n][.m]서식문자 => [] 안의 옵션은 필요한 경우 사용한다.
# - : 전체 자리수가 지정된 경우 데이터를 왼쪽에 맞춰 출력한다.
# 0 : 전체 자리수가 지정된 경우 왼쪽의 남는 자리에 '0'을 채워 출력한다. => 숫자만
# n : 출력할 데이터의 전체 자리수 => 전체 자리수가 지정되면 데이터를 오른쪽에 맞춰 출력한다.
# .m : 소수점 아래 자리수

# print('출력서식' % 출력할 데이터) => 출력할 데이터가 2개 이상이면 ()로 묶어준다.
print('%5d' % 100)
print('%5d' % 1)
print('%-5d' % 1)
print('%05d' % 1)
print('%5d' % 10000)
print('=' * 50)

print('%5s' % 'abc')
print('%5s' % 'a')
print('%-5s' % 'a')
print('%05s' % 'a') # 파이썬은 문자열 앞의 0은 무시된다.
print('%5s' % 'abcde')
print('=' * 50)

print('%6.2f' % 123.45)
print('%6.2f' % 123.456) # 소수점 아래 자리수가 모자라면 잘리는 자리에서 반올림해서 표시한다.
print('%6.2f' % 123.4) # 소수점 아래 자리수가 남으면 남는 자리에 '0'이 채워진다.
print('%4.0f' % 60.4)
print('%4.0f' % 59.5)
print('=' * 50)

print('%d + %d = %2d' % (5, 3, 5 + 3))
print('%d - %d = %2d' % (5, 3, 5 - 3))
print('%d * %d = %2d' % (5, 3, 5 * 3))
# 파이썬은 정수와 정수의 나눗셈 결과는 실수로 계산되지만 %d로 출력하면 정수만 출력한다.
print('%d / %d = %2d' % (5, 3, 5 / 3))
print('%d / %d = %f' % (5, 3, 5 / 3))
print('%d // %d = %f' % (5, 3, 5 // 3)) # 몫
# 정수 데이터의 나머지를 계산하려면 '%' 연산자를 사용하고 '%' 자체를 출력하려면 '%'를 연속해서
# 2개를 적어야 '%'가 출력된다.
print('%d %% %d = %f' % (5, 3, 5 % 3)) # 나머지
print('=' * 50)

# ============================================================================================

# format() 함수와 출력 인덱스를 사용해 출력하기 => 인덱스는 0부터 시작된다.
# {}안에 인덱스는 부분적으로 사용할 수 없다.
print('{} {}'.format('홍길동', '바보'))
print('{0} {1}'.format('홍길동', '바보'))
print('{1} {0}'.format('홍길동', '바보'))
print('{0} {1} {0}'.format('홍길동', '바보'))
print('{0} {1} {0}'.format('홍길동', '바보', '멍청이'))
# print('{0} {1} {2}'.format('홍길동', '바보')) # 에러 발생
print('=' * 50)

# format() 함수와 출력 인덱스를 사용해 서식을 지정해서 출력하기
# 반드시 인덱스 번호를 적어야 하고 인덱스 번호 뒤에 ':'을 찍고 출력 서식을 써준다.
print('{0:10s}님은 {1:03d}살 입니다.'.format('홍길동', 20))
print('=' * 50)

# 문자열 정렬
print('{0:<10s}왼쪽 정렬'.format('hi')) # '<' => 왼쪽 정렬, 생략시 기본값
print('{0:10s}왼쪽 정렬'.format('hi'))
print('{0:>10s}오른쪽 정렬'.format('hi')) # '>' => 오른쪽 정렬
print('{0:^10s}가운데 정렬'.format('hi')) # '^' => 가운데 정렬
print('=' * 50)

# 공백 채우기
print('{0:&<10s}왼쪽 정렬'.format('hi'))
print('{0:*>10s}오른쪽 정렬'.format('hi'))
print('{0:$^10s}가운데 정렬'.format('hi'))
print('=' * 50)

# f접두어를 사용한 포매팅
name = '임꺽정'
age = 35
print(f'{name}님은 {age}살 입니다.')



































